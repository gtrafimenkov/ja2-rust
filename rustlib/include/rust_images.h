#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define STCI_ID_LEN 4

#define STCI_ZLIB_COMPRESSED 16

#define STCI_ETRLE_COMPRESSED 32

/**
 * Palette structure, mimics that of Win32
 */
struct SGPPaletteEntry {
  uint8_t peRed;
  uint8_t peGreen;
  uint8_t peBlue;
  uint8_t _unused;
};

/**
 * Structure that describes one image from an indexed STCI file
 */
struct ETRLEObject {
  uint32_t uiDataOffset;
  uint32_t uiDataLength;
  int16_t sOffsetX;
  int16_t sOffsetY;
  uint16_t usHeight;
  uint16_t usWidth;
};

/**
 * Results of loading STI image.
 */
struct STIImageLoaded {
  bool success;
  uint32_t image_data_size;
  uint16_t Height;
  uint16_t Width;
  uint16_t number_of_subimages;
  uint8_t pixel_depth;
  uint32_t app_data_size;
  uint8_t *image_data;
  bool indexed;
  struct SGPPaletteEntry *palette;
  struct ETRLEObject *subimages;
  uint8_t *app_data;
  bool zlib_compressed;
};

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Load STI image.
 * If the function was successful, don't forget to free memory allocated for palette, subimages, app_data, image_data.
 * Memory must be freed with RustDealloc.
 */
struct STIImageLoaded LoadSTIImage2(FileID file_id,
                                    bool load_app_data);

struct STIImageLoaded LoadSTIImage(FileID file_id, bool load_app_data);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus
